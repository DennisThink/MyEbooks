// Copyright (c) 2011 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#ifndef STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
#define STORAGE_LEVELDB_INCLUDE_OPTIONS_H_

#include <stddef.h>
#include "leveldb/export.h"

namespace leveldb {

class Cache;
class Comparator;
class Env;
class FilterPolicy;
class Logger;
class Snapshot;

// DB contents are stored in a set of blocks, each of which holds a
// sequence of key,value pairs.  Each block may be compressed before
// being stored in a file.  The following enum describes which
// compression method (if any) is used to compress a block.

//数据内容保存在block的集合中，每个block都是一系列的key和value对。在保存到文件之前，每个块都可能被压缩。
// 以下的枚举类型描述了他们所使用的压缩算法。

//压缩类型
enum CompressionType {
  // NOTE: do not change the values of existing entries, as these are
  // part of the persistent format on disk.
  kNoCompression     = 0x0,//无压缩
  kSnappyCompression = 0x1 //使用snappy压缩算法 https://github.com/google/snappy
};

// Options to control the behavior of a database (passed to DB::Open)
/**
 * @class Options
 * @author dennis
 * @date 13/11/18
 * @file options.h
 * @brief 
 *   用作DB::Open时的选项，用来控制数据库的行为
 */

struct LEVELDB_EXPORT Options {
  // -------------------
  // Parameters that affect behavior

  // Comparator used to define the order of keys in the table.
  // Default: a comparator that uses lexicographic byte-wise ordering
  // 比较器被用来定义表中key的顺序，默认的比较器使用字典序，可以自定义比较器。
  //
  //
  //
  // REQUIRES: The client must ensure that the comparator supplied
  // here has the same name and orders keys *exactly* the same as the
  // comparator provided to previous open calls on the same DB.
  // 调用者需要保证此处的比较器和DB打开时的比较器完全的一致。
  // 也就是下面的Option中的比较器
  /*  static Status Open(const Options& options,
                     const std::string& name,
                     DB** dbptr);*/
  const Comparator* comparator; 

  // If true, the database will be created if it is missing.
  // Default: false
  // 没有数据库的时候创建，默认是false
  bool create_if_missing;

  // If true, an error is raised if the database already exists.
  // Default: false
  // 当数据库存在的时候，报错，默认不报错
  bool error_if_exists;

  // If true, the implementation will do aggressive checking of the
  // data it is processing and will stop early if it detects any
  // errors.  This may have unforeseen ramifications: for example, a
  // corruption of one DB entry may cause a large number of entries to
  // become unreadable or for the entire DB to become unopenable.
  // Default: false
  // 严格检查：当为true的时候，代码实现会对数据进行要严格的检查，如果出现任何错误就会立即停止解析。
  // 可能会引起无法预计的后果。数据库中的一个key有错，会导致大批的key变得不可读，甚至整个文件都不可读，所以默认关闭
  bool paranoid_checks;

  // Use the specified object to interact with the environment,
  // e.g. to read/write files, schedule background work, etc.
  // Default: Env::Default()
  // 与系统进行交互的对象，包括读写文件，执行后台任务等等。
  Env* env;

  // Any internal progress/error information generated by the db will
  // be written to info_log if it is non-null, or to a file stored
  // in the same directory as the DB contents if info_log is null.
  // Default: nullptr
  // 当info_log不为空的时候，在整个数据处理期间的信息和错误都会保存到这个地方。
  // 如果info_log为空，则数据的内容会保存到同样路径下的一个文件中。
  Logger* info_log;

  // -------------------
  // Parameters that affect performance

  // Amount of data to build up in memory (backed by an unsorted log
  // on disk) before converting to a sorted on-disk file.
  //
  // Larger values increase performance, especially during bulk loads.
  // Up to two write buffers may be held in memory at the same time,
  // so you may wish to adjust this parameter to control memory usage.
  // Also, a larger write buffer will result in a longer recovery time
  // the next time the database is opened.
  //
  // Default: 4MB
  // 写buff大小，默认4M
  size_t write_buffer_size;

  // Number of open files that can be used by the DB.  You may need to
  // increase this if your database has a large working set (budget
  // one open file per 2MB of working set).
  //
  // Default: 1000
  // 最大打开文件数，默认1000
  int max_open_files;

  // Control over blocks (user data is stored in a set of blocks, and
  // a block is the unit of reading from disk).

  // If non-null, use the specified cache for blocks.
  // If null, leveldb will automatically create and use an 8MB internal cache.
  // Default: nullptr
  // 缓存，不为空的时候用来保存block，默认是LRU的Cache
  // 为空的时候，leveldb会自动创建和使用内部的8M的缓存
  Cache* block_cache;

  // Approximate size of user data packed per block.  Note that the
  // block size specified here corresponds to uncompressed data.  The
  // actual size of the unit read from disk may be smaller if
  // compression is enabled.  This parameter can be changed dynamically.
  //
  // Default: 4K
  // 默认Block的大小为4K
  size_t block_size;

  // Number of keys between restart points for delta encoding of keys.
  // This parameter can be changed dynamically.  Most clients should
  // leave this parameter alone.
  //
  // Default: 16
  // 内部默认重新开始 16个key
  int block_restart_interval;

  // Leveldb will write up to this amount of bytes to a file before
  // switching to a new one.
  // Most clients should leave this parameter alone.  However if your
  // filesystem is more efficient with larger files, you could
  // consider increasing the value.  The downside will be longer
  // compactions and hence longer latency/performance hiccups.
  // Another reason to increase this parameter might be when you are
  // initially populating a large database.
  //
  // Default: 2MB
  // 默认文件大小，当数据大小到阈值的时候，会自动保存到文件
  size_t max_file_size;

  // Compress blocks using the specified compression algorithm.  This
  // parameter can be changed dynamically.
  //
  // Default: kSnappyCompression, which gives lightweight but fast
  // compression.
  //
  // Typical speeds of kSnappyCompression on an Intel(R) Core(TM)2 2.4GHz:
  //    ~200-500MB/s compression
  //    ~400-800MB/s decompression
  // Note that these speeds are significantly faster than most
  // persistent storage speeds, and therefore it is typically never
  // worth switching to kNoCompression.  Even if the input data is
  // incompressible, the kSnappyCompression implementation will
  // efficiently detect that and will switch to uncompressed mode.
  // 压缩算法，运行过程中可以动态改变
  CompressionType compression;

  // EXPERIMENTAL: If true, append to existing MANIFEST and log files
  // when a database is opened.  This can significantly speed up open.
  //
  // Default: currently false, but may become true later.
  // 附加到已经存在的MANIFEST和log文件，当一个数据库被打开的时候，这能明显的加速打开
  bool reuse_logs;

  // If non-null, use the specified filter policy to reduce disk reads.
  // Many applications will benefit from passing the result of
  // NewBloomFilterPolicy() here.
  //
  // Default: nullptr
  // 如果不为空，这个特定的过滤会减少硬盘的读取。将filter_policy设置为NewBloomFilterPolicy()将会使许多的应用从中受益。
  const FilterPolicy* filter_policy;

  // Create an Options object with default values for all fields.
  // 默认构造函数
  Options();
};

// Options that control read operations
// 读取选项
struct LEVELDB_EXPORT ReadOptions {
  // If true, all data read from underlying storage will be
  // verified against corresponding checksums.
  // Default: false
  // 是否检查校验和，默认不检查
  bool verify_checksums;

  // Should the data read for this iteration be cached in memory?
  // Callers may wish to set this field to false for bulk scans.
  // Default: true
  // 数据是否保存在缓存，默认保存
  bool fill_cache;

  // If "snapshot" is non-null, read as of the supplied snapshot
  // (which must belong to the DB that is being read and which must
  // not have been released).  If "snapshot" is null, use an implicit
  // snapshot of the state at the beginning of this read operation.
  // Default: nullptr
  // 如果不为空，作为补充的snapshot，如果为空，作为DB内含的snapshot。
  const Snapshot* snapshot;

  ReadOptions()
      : verify_checksums(false),
        fill_cache(true),
        snapshot(nullptr) {
  }
};

// Options that control write operations
struct LEVELDB_EXPORT WriteOptions {
  // If true, the write will be flushed from the operating system
  // buffer cache (by calling WritableFile::Sync()) before the write
  // is considered complete.  If this flag is true, writes will be
  // slower.
  //
  // If this flag is false, and the machine crashes, some recent
  // writes may be lost.  Note that if it is just the process that
  // crashes (i.e., the machine does not reboot), no writes will be
  // lost even if sync==false.
  //
  // In other words, a DB write with sync==false has similar
  // crash semantics as the "write()" system call.  A DB write
  // with sync==true has similar crash semantics to a "write()"
  // system call followed by "fsync()".
  //
  // Default: false
  // 是否异步写，默认是
  bool sync;

  WriteOptions()
      : sync(false) {
  }
};

}  // namespace leveldb

#endif  // STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
